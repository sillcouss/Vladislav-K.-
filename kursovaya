# МИНИСТЕРСТВО ОБРАЗОВАНИЯ, НАУКИ И МОЛОДЕЖНОЙ ПОЛИТИКИ РЕСПУБЛИКИ КОМИ

Государственное профессиональное образовательное учреждение "Сыктывкарский политехнический техникум"

## Курсовая работа

Тема: БД районной поликлиники. Подсистема «Работа с пациентами».

 Срок представления работы к защите: 15 ноября 2024 года. 

Профессия/специальность

09.02.07 "Информационные системы и программирование" 

Выполнил

Косяков Владислав Игоревич

Дневная, 4 курс, 414 группа

"11" ноября 2024г.

Руководитель

Пунгин И.В.

__________________________________________
"11" ноября 2024г.

Сыктывкар 2024





1.1. Описание предметной области и функции решаемых задач

- Регистрацию новых пациентов.
- Ведение медицинских карт и истории болезни.
- Запись пациентов на прием к врачам.
- Управление списком врачей и их расписанием.
- Организацию обработки результатов анализов.
- Отчетность и статистический анализ по показателям здоровья населения.

1.2. Перечень входных данных

- Личные данные пациентов (ФИО, дата рождения, пол, адрес, контактная информация).
- Информация о медицинской страховой компании.
- Данные о записях на прием (дата и время, врач, специализация).
- История болезней и предыдущие диагнозы.
- Результаты медицинских анализов.
- Информация о прививках и профилактических осмотрах.

1.3. Перечень выходных данных

- Списки пациентов, записанных на прием.
- Медицинские карты пациентов.
- Отчеты по текущему состоянию пациентов и их лечению.
- Статистические данные о заболеваемости в районе.
- Информационные сообщения о напоминании о приеме или необходимых анализах.

1.4. Ограничения предметной области (если таковые имеются)

- Конфиденциальность данных пациентов и соблюдение норм защиты персональной информации.
- Ограничения по количеству одновременно записываемых на прием пациентов к одному врачу.
- Нормы и правила медицинской документации, установленные законодательством.
- Ограничения финансового характера на услуги поликлиники (например, лимиты по медицинским страховкам).

1.5. Взаимодействие с другими программами

- Интеграция с системой электронного здравоохранения для обмена данными.
- Взаимодействие с базами данных страховых компаний для проверки статуса медицинских полисов.
- Связь с лабораторными информационными системами для получения результатов анализов.
- Возможность подключения к программным обеспечениям для учета финансовых операций и назначения лекарств.

2.1. Выделение информационных объектов

- Пациент: индивиду, получающий медицинскую помощь.
- Врач: медицинский работник, предоставляющий услуги пациентам.
- Запись на прием: информация о дате, времени и специалисте, к которому записан пациент.
- Медицинская карта: документ, содержащий историю болезни пациента и результаты его обследований.
- Анализ: результаты медицинских исследований, назначенных врачом.
- Страховая компания: организация, обеспечивающая финансирование медицинских услуг.
- Лекарственные препараты: медикаменты, назначенные пациентам.

2.2. Определение атрибутов объектов

Каждый информационный объект может иметь свои атрибуты:

- Пациент:
  - Идентификационный номер (ID)
  - Фамилия
  - Имя
  - Отчество
  - Дата рождения
  - Пол
  - Адрес
  - Контактный телефон
  - Страховая компания (ID)

- Врач:
  - Идентификационный номер (ID)
  - Фамилия
  - Имя
  - Отчество
  - Специализация
  - Контактный телефон
  - Рабочий график

- Запись на прием:
  - Идентификационный номер (ID)
  - Дата и время записи
  - Идентификационный номер пациента (ID)
  - Идентификационный номер врача (ID)

- Медицинская карта:
  - Идентификационный номер (ID)
  - Идентификационный номер пациента (ID)
  - Дата последнего обновления
  - История заболеваний

- Анализ:
  - Идентификационный номер (ID)
  - Идентификационный номер пациента (ID)
  - Тип анализа
  - Дата проведения
  - Результаты

- Страховая компания:
  - Идентификационный номер (ID)
  - Название компании
  - Контактная информация
  
- Лекарственные препараты:
  - Идентификационный номер (ID)
  - Название препарата
  - Дозировка
  - Показания

2.3. Определение отношений и мощности отношений между объектами

- Пациент — Запись на прием: один пациент может иметь несколько записей на прием (1:N).
- Врач — Запись на прием: один врач может принимать нескольких пациентов, поэтому на одного врача может приходиться множество записей (1:N).
- Пациент — Медицинская карта: у одного пациента может быть только одна медицинская карта (1:1).
- Пациент — Анализ: один пациент может проходить несколько анализов (1:N).
- Пациент — Страховая компания: один пациент может быть застрахован одной страховой компанией, но одна страховая компания может охватывать множество пациентов (1:N).
- Анализ — Медицинская карта: результаты анализов могут храниться в медицинской карте пациента (1:N).
- Медицинская карта — Лекарственные препараты: в медицинской карте может содержаться информация о нескольких назначениях лекарств для пациента (1:N).

2.4. Построение концептуальной модели

На основе вышеприведенных данных концептуальная модель базы данных может быть представлена в виде схемы, которая визуализирует объекты и их связи. Схема может выглядеть следующим образом (в текстовом виде):

[Пациент] (1) ---- (N) [Запись на прием]
     |
     | (1)
     |
     (1) ---- (1) [Медицинская карта]
     |
     | (N)
     |
     (1) ---- (N) [Анализ]
     |
     | (N)
     |
[Страховая компания]

[Врач] (1) ---- (N) [Запись на прием]

[Медицинская карта] (1) ---- (N) [Лекарственные препараты]

## 3.
**Логическая структура БД районной поликлиники. Подсистема «Работа с пациентами»**

**1. Таблица "Пациенты"**

- **ID_пациента** (PK)
- Фамилия
- Имя
- Отчество
- Дата_рождения
- Пол
- Адрес
- Телефон
- ID_страховой_компании (FK)

**2. Таблица "Врачи"**

- **ID_врача** (PK)
- Фамилия
- Имя
- Отчество
- Специализация
- Телефон
- Рабочий_график

**3. Таблица "Записи_на_прием"**

- **ID_записи** (PK)
- Дата_и_время
- ID_пациента (FK)
- ID_врача (FK)

**4. Таблица "Медицинские_карты"**

- **ID_карты** (PK)
- ID_пациента (FK)
- Дата_последнего_обновления
- История_болезней

**5. Таблица "Анализы"**

- **ID_анализа** (PK)
- ID_пациента (FK)
- Тип_анализа
- Дата_проведения
- Результаты

**6. Таблица "Страховые_компании"**

- **ID_страховой_компании** (PK)
- Название
- Контактная_информация

**7. Таблица "Лекарственные_препараты"**

- **ID_препарата** (PK)
- Название
- Дозировка
- Показания

**Отношения между таблицами:**

- **Пациенты** (1) — **Записи на прием** (N) (ID_пациента)
- **Врачи** (1) — **Записи на прием** (N) (ID_врача)
- **Пациенты** (1) — **Медицинские карты** (1) (ID_пациента)
- **Пациенты** (1) — **Анализы** (N) (ID_пациента)
- **Пациенты** (N) — **Страховые компании** (1) (ID_страховой_компании)
- **Медицинские карты** (1) — **Лекарственные препараты** (N)

**Замечания по реализации:**

- Поля с ключами (PK, FK) должны быть индексированы для ускорения поиска.
- Использовать типы данных, соответствующие назначению (например, DATE для даты рождения, VARCHAR для строковых данных).
- Обеспечить целостность данных с помощью ограничений и триггеров, если необходимо.
- Предусмотреть защиту данных в соответствии с нормами (защита персональной информации пациентов).

Эта логическая структура базы данных обеспечивает эффективное хранение и управление информацией о пациентах, врачах, записях, анализах и соответствующих данных в поликлинике.


## 4.

**Физическая структура базы данных районной поликлиники. Подсистема «Работа с пациентами»**

**1. Таблица "Пациенты"**

- **ID_пациента**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **Фамилия**: VARCHAR(50) NOT NULL
- **Имя**: VARCHAR(50) NOT NULL
- **Отчество**: VARCHAR(50)
- **Дата_рождения**: DATE NOT NULL
- **Пол**: ENUM('М', 'Ж') NOT NULL
- **Адрес**: VARCHAR(255)
- **Телефон**: VARCHAR(15)
- **ID_страховой_компании**: INT, FOREIGN KEY (ID_страховой_компании) REFERENCES Страховые_компании(ID_страховой_компании)

**Индексы**: Ключевые поля индексы основные для быстрого доступа (ID_пациента, ID_страховой_компании).  

---

**2. Таблица "Врачи"**

- **ID_врача**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **Фамилия**: VARCHAR(50) NOT NULL
- **Имя**: VARCHAR(50) NOT NULL
- **Отчество**: VARCHAR(50)
- **Специализация**: VARCHAR(100) NOT NULL
- **Телефон**: VARCHAR(15)
- **Рабочий_график**: VARCHAR(50)

**Индексы**: Идентификатор врача (ID_врача).  

---

**3. Таблица "Записи_на_прием"**

- **ID_записи**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **Дата_и_время**: DATETIME NOT NULL
- **ID_пациента**: INT NOT NULL, FOREIGN KEY (ID_пациента) REFERENCES Пациенты(ID_пациента)
- **ID_врача**: INT NOT NULL, FOREIGN KEY (ID_врача) REFERENCES Врачи(ID_врача)

**Индексы**: Создание индексов по сочетанию ID_пациента и ID_врача.  

---

**4. Таблица "Медицинские_карты"**

- **ID_карты**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **ID_пациента**: INT NOT NULL, FOREIGN KEY (ID_пациента) REFERENCES Пациенты(ID_пациента)
- **Дата_последнего_обновления**: DATE
- **История_болезней**: TEXT

**Индексы**: Индекс по ID_пациента для быстрого доступа к медицинской карте.

---

**5. Таблица "Анализы"**

- **ID_анализа**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **ID_пациента**: INT NOT NULL, FOREIGN KEY (ID_пациента) REFERENCES Пациенты(ID_пациента)
- **Тип_анализа**: VARCHAR(100) NOT NULL
- **Дата_проведения**: DATE NOT NULL
- **Результаты**: TEXT

**Индексы**: Индекс по ID_пациента для быстрого доступа к анализам.

---

**6. Таблица "Страховые_компании"**

- **ID_страховой_компании**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **Название**: VARCHAR(100) NOT NULL
- **Контактная_информация**: VARCHAR(255)

**Индексы**: Индекс для быстрого доступа по названию страховой компании.

---

**7. Таблица "Лекарственные_препараты"**

- **ID_препарата**: INT NOT NULL AUTO_INCREMENT PRIMARY KEY
- **Название**: VARCHAR(100) NOT NULL
- **Дозировка**: VARCHAR(50)
- **Показания**: TEXT

**Индексы**: Индекс по названию препарата для быстрой фильтрации.

---

**Общие рекомендации:**

1. **Типы данных**: Каждый тип данных выбран в зависимости от обрабатываемой информации. Для строк — VARCHAR, для дат — DATE или DATETIME, для больших объемов текста — TEXT.
  
2. **Индексация**: Индексация ключевых полей и часто используемых для поиска колонок критична для производительности. Это особенно важно для больших объемов данных, т.к. позволяет существенно ускорить доступ и обработку информации.

3. **Резервное копирование**: Регулярное резервное копирование и восстановление данных. Определение графика резервного копирования (ежедневное, еженедельное).

4. **Нормализация**: Структура базы данных соблюдает принцип нормализации для минимизации избыточности и обеспечения целостности данных.

5. **Безопасность**: Доступ к базе данных должен быть ограничен на уровне ролей (права доступа для администраторов, врачей, регистраторов). Шифрование данных, особенно персональных, для защиты конфиденциальной информации.

6. **Оптимизация запросов**: Использование оптимизированных SQL-запросов для повышения эффективности работы и минимизации времени обработки данных.

Эта физическая структура базы данных позволяет эффективно управлять каждой из сущностей и поддерживать целостность данных в системе работы с пациентами в поликлинике.
